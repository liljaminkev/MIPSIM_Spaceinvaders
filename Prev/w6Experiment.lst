    1                  		.data   
    2 10010000 3e6f6f3c	al1:	.word	0x3e6f6f3c
    3 10010004 5d20205b		.word	0x5d20205b
    4 10010008 305f5f30		.word	0x305f5f30
    5 1001000c 3e4f4f3c	al12:	.word	0x3e4f4f3c
    6 10010010 5d20205b		.word	0x5d20205b
    7 10010014 20303020		.word	0x20303020
    8 10010018 db2020db	al2:	.word	0xdb2020db
    9 1001001c 20dbdb20		.word	0x20dbdb20
   10 10010020 db2020db		.word	0xdb2020db
   11 10010024 20202020	al22:	.word	0x20202020
   12 10010028 20dbdb20		.word	0x20dbdb20
   13 1001002c 20202020		.word	0x20202020
   14 10010030 20db1edb	ship:	.word	0x20db1edb
   15 10010034         	buffer:	.space 	25*81       	# A 256 bytes buffer  
   16 1001081d         	bitmap:	.space 	1:11*5
   17                   
   18                   ######
   19                   #keyboard
   20                   ######################
   21 a0000010         	keyboard:	.struct 0xa0000000	#start from hardware base address
   22 a0000000         	flags:		.byte 0
   23 a0000001         	mask:		.byte 0
   24 a0000002         			.half 0
   25 a0000004         	keypress: 	.byte 0,0,0
   26 a0000007         	presscon: 	.byte 0
   27 a0000008         	keydown:	.half 0
   28 a000000a         	shiftdown:	.byte 0
   29 a000000b         	downcon:	.byte 0
   30 a000000c         	keyup:		.half 0
   31 a000000e         	upshift:	.byte 0
   32 a000000f         	upcon:		.byte 0
   33                  			.data
   34                   		
   35          00000006	timer.int = 6
   36 a0000070         	timer:	.struct 0xa0000050
   37 a0000050         	flags:	.byte	0
   38 a0000051         	mask:	.byte	0
   39 a0000052         		.half	0
   40 a0000054         	t1:	.word	0
   41 a0000058         	t2:	.word	0
   42 a000005c         	t3:	.word	0
   43 a0000060         	t4:	.word	0
   44 a0000064         	t5:	.word	0
   45 a0000068         	t6:	.word	0
   46 a000006c         	t7:	.word	0
   47                  		.code  
   48                   main:  
   49 00400000 0c100039		jal	startTimer
   50                   #variables 
   51                  		la	$s2,0			#movement tracker
   51 00400004 3c120000		lui	$s2,0x00
   51 00400008 36520000		ori	$s2,$s2,0x00
   52                  		li	$s6,25
   52 0040000c 34160019		ori	$s6,$0,0x19
   53                   	
   54                   
   55                  	1:	li	$s7,26			#spaces to move:
   55 00400010 3417001a		ori	$s7,$0,0x1A
   56 00400014 32d30001		andi 	$s3,$s6,1		#odd or even line
   57 00400018 16600001		bnez	$s3,2f			#
   58 0040001c 2013ffff		addi	$s3,$0,-1
   59                  	2:	la	$a0,timer.flags	
   59 00400020 3c04a000		lui	$a0,0xA000
   59 00400024 34840050		ori	$a0,$a0,0x50
   60                   
   61                   
   62                   #move alien
   63 00400028 0000064c		syscall	$IO_read
   64 0040002c 30480002		andi	$t0,$v0,0x02
   65 00400030 11000007		beqz	$t0,3f
   66                  		la	$a0,timer.t1
   66 00400034 3c04a000		lui	$a0,0xA000
   66 00400038 34840054		ori	$a0,$a0,0x54
   67 0040003c 0000064c		syscall	$IO_read
   68 00400040 0c10006f		jal 	movAi
   69 00400044 0c100032		jal	render
   70 00400048 02539020		add	$s2,$s2,$s3
   71 0040004c 22f7ffff		addi	$s7,$s7,-1
   72                   
   73                   	
   74                   
   75                   
   76                   	
   77                   #move mothership	
   78 00400050 0000064c	3:	syscall	$IO_read
   79 00400054 30480004		andi	$t0,$v0,0x04
   80 00400058 11000004		beqz	$t0,4f
   81                  		la	$a0,timer.t2
   81 0040005c 3c04a000		lui	$a0,0xA000
   81 00400060 34840058		ori	$a0,$a0,0x58
   82 00400064 0000064c		syscall	$IO_read
   83 00400068 0c100031		jal 	mShip
   84                   
   85                   
   86                   
   87                   #move bullet
   88 0040006c 0000064c	4:	syscall	$IO_read
   89 00400070 30480006		andi	$t0,$v0,0x06
   90 00400074 11000004		beqz	$t0,5f
   91                  		la	$a0,timer.t3
   91 00400078 3c04a000		lui	$a0,0xA000
   91 0040007c 3484005c		ori	$a0,$a0,0x5C
   92 00400080 0000064c		syscall	$IO_read
   93 00400084 0c10002f		jal 	bullet
   94                   
   95                   
   96                   #move bomb
   97 00400088 0000064c	5:	syscall	$IO_read
   98 0040008c 30480008		andi	$t0,$v0,0x08
   99 00400090 11000004		beqz	$t0,6f
  100                  		la	$a0,timer.t4
  100 00400094 3c04a000		lui	$a0,0xA000
  100 00400098 34840060		ori	$a0,$a0,0x60
  101 0040009c 0000064c		syscall	$IO_read
  102 004000a0 0c100030		jal 	bomb
  103                   
  104                   #move ship
  105                   6:	#jal	io
  106                   
  107                   
  108                   
  109                   	#jal	placeShip
  110                   
  111                   
  112                   
  113                   	
  114                   	
  115 004000a4 1ee0ffde		bgtz	$s7,2b
  116 004000a8 22d6ffff		addi	$s6,$s6,-1
  117 004000ac 22520051		addi	$s2,$s2,81
  118 004000b0 1ec0ffd7		bgtz	$s6,1b
  119                   	
  120                   
  121 004000b4 0000028c		syscall	$exit
  122                   
  123                   #begin ship
  124                   ship:
  125 004000b8 03e00008		jr	$ra
  126                   #end
  127                   
  128                   #begin bullet
  129                   bullet:
  130 004000bc 03e00008		jr	$ra
  131                   #end
  132                   
  133                   #begin bomb
  134                   bomb:
  135 004000c0 03e00008		jr	$ra
  136                   #end
  137                   
  138                   #begin mShip
  139                   mShip:
  140 004000c4 03e00008		jr	$ra
  141                   #end
  142                   
  143                   #begin barriers
  144                   
  145                   #end
  146                   	
  147                   	
  148                   	
  149                   render:
  150 004000c8 23bdfffc		addi	$sp,$sp,-4
  151 004000cc afa40000		sw	$a0,($sp)
  152                  		la	$a0,buffer	#get a0 ready for printing
  152 004000d0 3c041001		lui	$a0,0x1001
  152 004000d4 34840034		ori	$a0,$a0,0x34
  153 004000d8 0000010c		syscall	$print_string	#cout a0
  154 004000dc 8fa40000		lw	$a0,($sp)
  155 004000e0 23bd0004		addi	$sp,$sp,4
  156                   	
  157                   #begin timer
  158                   startTimer:
  159                   #alien timer
  160                  		la	$a0,timer.t1		# hardware address of timer1
  160 004000e4 3c04a000		lui	$a0,0xA000
  160 004000e8 34840054		ori	$a0,$a0,0x54
  161 004000ec 20050004		addi	$a1,$0,4		# 4 byte data
  162 004000f0 200602bc		addi	$a2,$0,700		# timer interval every five seconds
  163 004000f4 0000068c		syscall	$IO_write
  164                   #mothership timer
  165                  		la	$a0,timer.t2		# hardware address of timer1
  165 004000f8 3c04a000		lui	$a0,0xA000
  165 004000fc 34840058		ori	$a0,$a0,0x58
  166 00400100 20050004		addi	$a1,$0,4		# 4 byte data
  167 00400104 200607d0		addi	$a2,$0,2000		# timer interval every five seconds
  168 00400108 0000068c		syscall	$IO_write
  169                   #bullet timer
  170                  		la	$a0,timer.t3		# hardware address of timer1
  170 0040010c 3c04a000		lui	$a0,0xA000
  170 00400110 3484005c		ori	$a0,$a0,0x5C
  171 00400114 20050004		addi	$a1,$0,4		# 4 byte data
  172 00400118 20060bb8		addi	$a2,$0,3000		# timer interval every five seconds
  173 0040011c 0000068c		syscall	$IO_write
  174                   #bomb timer
  175                  		la	$a0,timer.t4		# hardware address of timer1
  175 00400120 3c04a000		lui	$a0,0xA000
  175 00400124 34840060		ori	$a0,$a0,0x60
  176 00400128 20050004		addi	$a1,$0,4		# 4 byte data
  177 0040012c 20060fa0		addi	$a2,$0,4000		# timer interval every five seconds
  178 00400130 0000068c		syscall	$IO_write
  179                   	
  180 00400134 03e00008		jr	$ra
  181                   #end 
  182                   #begin io
  183                   io:
  184 00400138 23bdfff0		addi	$sp,$sp,-16
  185 0040013c afa8000c		sw	$t0,12($sp)
  186 00400140 afa40008		sw	$a0,8($sp)
  187 00400144 afa60004		sw	$a2,4($sp)
  188 00400148 afa50000		sw	$a1,0($sp)
  189                   	
  190                  		la	$a0,keyboard.flags	# hardware address of keyboard flags
  190 0040014c 3c04a000		lui	$a0,0xA000
  190 00400150 34840000		ori	$a0,$a0,0x00
  191 00400154 20050001		addi	$a1,$0,1		# 1 byte of data
  192 00400158 0000064c		syscall 	$IO_read		# read flags
  193 0040015c 30480002		andi	$t0,$v0,0b10
  194                   #	beqz	$t0,#event
  195 00400160 20840008		addi	$a0,$a0,8
  196                   #	blez	$v0,1f			# branch if no keyboard flags
  197                   #	move	$t0,$v0
  198                   
  199                   	
  200                  		la	$a0,keyboard.keydown	# hardware address of keyboard code
  200 00400164 3c04a000		lui	$a0,0xA000
  200 00400168 34840008		ori	$a0,$a0,0x08
  201 0040016c 20050002		addi	$a1,$0,2		# 2 bytes of data
  202 00400170 0000064c		syscall	$IO_read
  203 00400174 00402021		move	$a0,$v0
  204 00400178 0000004c		syscall 	$print_int		# character code
  205 0040017c 31090004		andi	$t1,$t0,4		# flag bit 2
  206 00400180 00094822		neg	$t1,$t1			# allows use of bltzal
  207                   	
  208                   		
  209 00400184 8fa8000c	1:	lw	$t0,12($sp)
  210 00400188 8fa40008		lw	$a0,8($sp)
  211 0040018c 8fa60004		lw	$a2,4($sp)
  212 00400190 8fa50000		lw	$a1,0($sp)
  213 00400194 23bd000c		addi	$sp,$sp,12
  214                   	
  215 00400198 03e00008		jr	$ra
  216                   #end	
  217                   #begin Ship
  218                   placeShip:
  219                  		la	$s1,buffer
  219 0040019c 3c111001		lui	$s1,0x1001
  219 004001a0 36310034		ori	$s1,$s1,0x34
  220                  		la 	$t0,ship
  220 004001a4 3c081001		lui	$t0,0x1001
  220 004001a8 35080030		ori	$t0,$t0,0x30
  221 004001ac 8d090000		lw	$t1,($t0)
  222                  		usw	$t1,1920($s1)
  222 004001b0 aa290783		swl	$t1,1920+3($s1)
  222 004001b4 ba290780		swr	$t1,1920($s1)
  223 004001b8 03e00008		jr	$ra
  224                   
  225                   #end
  226                   #begin Move Alien	
  227                   movAi:
  228 004001bc 23bdfffc		addi	$sp,$sp,-4		
  229 004001c0 afbf0000		sw	$ra,0($sp)		
  230                  	1:	la	$s1,buffer		#load buffer
  230 004001c4 3c111001		lui	$s1,0x1001
  230 004001c8 36310034		ori	$s1,$s1,0x34
  231 004001cc 02328820		add	$s1,$s1,$s2		#incrment buffer by s2
  232 004001d0 32540001		andi	$s4,$s2,1		#find out if on an odd space
  233 004001d4 0c100079		jal	renai			#renai screen
  234                   
  235 004001d8 8fbf0000		lw	$ra,0($sp)	
  236 004001dc 23bd0004		addi	$sp,$sp,4
  237 004001e0 03e00008		jr	$ra
  238                   #end
  239                   #begin render aliens
  240                   ############################
  241                   #renai screen
  242                   #takes buffer pointer:s1, alien:t6
  243                   #local t0:numRows t1:twofows for diffrent alien
  244                   renai:
  245 004001e4 23bdfff8		addi	$sp,$sp,-8
  246 004001e8 afbf0004		sw	$ra,4($sp)
  247 004001ec afb20000		sw	$s2,0($sp)
  248 004001f0 0c1000aa		jal	clearBuffer
  249                   
  250                  		li	$t0,4		#row counter
  250 004001f4 34080004		ori	$t0,$0,0x04
  251                  		li	$t1,2		#counter for first 2 rows of aliens 
  251 004001f8 34090002		ori	$t1,$0,0x02
  252                  		li	$t2,bitmap	#do
  252 004001fc 3c0a1001		lui	$t2,0x1001
  252 00400200 354a081d		ori	$t2,$t2,0x81D
  253                  	row:	la	$t6,al1		#{alien 1 to t6
  253 00400204 3c0e1001		lui	$t6,0x1001
  253 00400208 35ce0000		ori	$t6,$t6,0x00
  254 0040020c 16800002		bnez	$s4,col		#if even go to col
  255                  		la	$t6,al12	#if odd change alien 1-2
  255 00400210 3c0e1001		lui	$t6,0x1001
  255 00400214 35ce000c		ori	$t6,$t6,0x0C
  256                  	col:	li	$t3,11			#start dowhile counter
  256 00400218 340b000b		ori	$t3,$0,0x0B
  257                   1:					#do
  258 0040021c 814c0000		lb	$t4,0($t2)		#load dead/alive status
  259 00400220 1d800001		bgtz	$t4,2f
  260 00400224 0c10009c		jal 	printAlien		#{place alien
  261 00400228 22310005	2:	addi	$s1,$s1,5		#incrment pointer:s1
  262 0040022c 216bffff		addi	$t3,$t3,-1		#decremnt col counter:t3
  263 00400230 214a0001		addi	$t2,$t2,1		#bitmap
  264 00400234 1d60fff9		bgtz	$t3,1b			#}while(t3<11)
  265 00400238 2231010d		addi	$s1,$s1,269	#move pointer back to left side of screen
  266                   
  267 0040023c 2108ffff		addi	$t0,$t0,-1	#rowcounter--
  268 00400240 2129ffff		addi	$t1,$t1,-1	#firstrows--
  269 00400244 1d200005		bgtz	$t1,3f		#if first two rows have been printed
  270                  		la	$t6,al2			#load second alien
  270 00400248 3c0e1001		lui	$t6,0x1001
  270 0040024c 35ce0018		ori	$t6,$t6,0x18
  271 00400250 16800002		bnez	$s4,3f			#if odd load alien2-2
  272                  		la	$t6,al22		#alien2-2 to t6
  272 00400254 3c0e1001		lui	$t6,0x1001
  272 00400258 35ce0024		ori	$t6,$t6,0x24
  273 0040025c 1d00ffee	3:	bgtz	$t0,col		#}while(t0<4)
  274 00400260 8fb20000		lw	$s2,0($sp)	#take info off stack
  275 00400264 8fbf0004		lw	$ra,4($sp)	#restore ra 
  276 00400268 23bd0008		addi	$sp,$sp,8	#resotre stack pointer
  277 0040026c 03e00008		jr	$ra		
  278                   #end
  279                   #begin Place alien
  280                   ############################
  281                   #Place alien 
  282                   #takes s1:buffer
  283                   printAlien:  
  284 00400270 23bdfffc		addi	$sp,$sp,-4
  285 00400274 afbf0000		sw	$ra,0($sp)
  286 00400278 8dcf0000		lw 	$t7,0($t6)               # get character at address  
  287                  		usw 	$t7,0($s1)               # else store current character in the buffer  
  287 0040027c aa2f0003		swl	$t7,0+3($s1)
  287 00400280 ba2f0000		swr	$t7,0($s1)
  288 00400284 8dcf0004		lw	$t7,4($t6)
  289                  		usw 	$t7,81($s1)               # else store current character in the buffer 
  289 00400288 aa2f0054		swl	$t7,81+3($s1)
  289 0040028c ba2f0051		swr	$t7,81($s1)
  290 00400290 8dcf0008		lw	$t7,8($t6)
  291                  		usw 	$t7,162($s1)               # else store current character in the buffer
  291 00400294 aa2f00a5		swl	$t7,162+3($s1)
  291 00400298 ba2f00a2		swr	$t7,162($s1)
  292 0040029c 8fbf0000		lw	$ra,0($sp)	
  293 004002a0 23bd0004		addi	$sp,$sp,4
  294 004002a4 03e00008		jr	$ra
  295                   
  296                   #end
  297                   #begin clear screen	
  298                   ############################
  299                   #clear screen
  300                   #clear the buffer with spaces and newlines
  301                   clearBuffer:
  302                  		la	$t0,buffer		#t0:bufferpointer
  302 004002a8 3c081001		lui	$t0,0x1001
  302 004002ac 35080034		ori	$t0,$t0,0x34
  303 004002b0 200a0018		addi	$t2,$0,24		#t2:counter
  304                  		li	$t3,0x20202020		#t3:space
  304 004002b4 3c0b2020		lui	$t3,0x2020
  304 004002b8 356b2020		ori	$t3,$t3,0x2020
  305 004002bc 200c000a		addi	$t4,$0,'\n		#t4:new line
  306                   1:
  307 004002c0 20090004		addi	$t1,$0,4		#charCounter = 80
  308                   2:	
  309                  		usw	$t3,($t0)		#store space in char 
  309 004002c4 a90b0003		swl	$t3,+3($t0)
  309 004002c8 b90b0000		swr	$t3,($t0)
  310                  		usw	$t3,4($t0)
  310 004002cc a90b0007		swl	$t3,4+3($t0)
  310 004002d0 b90b0004		swr	$t3,4($t0)
  311                  		usw	$t3,8($t0)
  311 004002d4 a90b000b		swl	$t3,8+3($t0)
  311 004002d8 b90b0008		swr	$t3,8($t0)
  312                  		usw	$t3,12($t0)
  312 004002dc a90b000f		swl	$t3,12+3($t0)
  312 004002e0 b90b000c		swr	$t3,12($t0)
  313                  		usw	$t3,16($t0)
  313 004002e4 a90b0013		swl	$t3,16+3($t0)
  313 004002e8 b90b0010		swr	$t3,16($t0)
  314 004002ec 21080014		addi	$t0,$t0,20		#incremnt buffer pointer
  315 004002f0 2129ffff		addi	$t1,$t1,-1		#charCounter--
  316 004002f4 1d20fff3		bgtz	$t1,2b			#fill char while less than 80 chars
  317                   	
  318 004002f8 a10c0000		sb	$t4,($t0)
  319 004002fc 21080001		addi	$t0,$t0,1
  320 00400300 214affff		addi	$t2,$t2,-1		#counter--
  321 00400304 1d40ffee		bgtz	$t2,1b			#branch back to 1 while less then 25 lines
  322 00400308 03e00008		jr 	$ra
  323                   #end
                 	